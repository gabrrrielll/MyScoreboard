{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","utils/players.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayer.js","App.js","serviceWorker.js","index.js"],"names":["Stats","props","totalScore","players","reduce","acc","player","score","totalPlayers","length","react_default","a","createElement","className","Stopwatch","state","isRunning","totalTime","tick","_this","setState","handleStart","handleReset","this","clockId","setInterval","clearInterval","timerID","onClick","Component","Header","_ref","title","components_Stats","components_Stopwatch","PLAYERS","name","id","Counter","changeScore","Icon","viewBox","isHighScore","d","transform","width","height","Player","_this$props","removePlayer","console","log","components_Icon","components_Counter","React","PureComponent","AddPlayer","value","handleChange","event","target","handleSubmit","preventDefault","addPlayer","onSubmit","type","placeholder","onChange","App","getHighScore","scores","map","p","highScore","Math","max","apply","Object","toConsumableArray","handleChangeScore","modifier","prevState","assign","handleRemovePlayer","filter","handleAddPlayer","concat","_this2","components_Header","components_Player","key","toString","components_AddPlayer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e99fa7e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Stats = props => {\r\n\r\n  const totalScore = props.players.reduce((acc, player) => acc += player.score, 0);\r\n  const totalPlayers = props.players.length;\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Players:</td>\r\n          <td>{totalPlayers}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total Points:</td>\r\n          <td>{totalScore}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Stats;","import React, { Component } from \"react\";\r\n\r\nclass Stopwatch extends Component {\r\n  \r\n  state = {\r\n    isRunning: false,\r\n    totalTime: 0\r\n  };\r\n\r\n  componentDidMount(){\r\n    this.clockId = setInterval(this.tick, 100);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick = ()=>{\r\n    if(this.state.isRunning){\r\n      this.setState({\r\n        totalTime: this.state.totalTime + 1 \r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  handleStart = () => {\r\n    this.setState(\r\n      { isRunning: !this.state.isRunning }\r\n      );    \r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState(\r\n      { \r\n        totalTime: 0,\r\n        isRunning: false\r\n       }\r\n      );    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        <h2>Stopwatch</h2>\r\n        <span className=\"stopwatch-time\">{this.state.totalTime}</span>\r\n        <button onClick={ this.handleStart }>\r\n          {this.state.isRunning ? 'Stop' : 'Start' }\r\n        </button>\r\n        <button onClick={this.handleReset}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\r\nimport Stats from './Stats';\r\nimport Stopwatch from \"./Stopwatch\";\r\n\r\nconst Header = ({title, players }) => {\r\n\r\n  return (\r\n    <header>\r\n      <Stats \r\n        players = { players } \r\n        />\r\n      <h1>{ title }</h1> \r\n      <Stopwatch /> \r\n    </header>    \r\n  );\r\n}\r\n\r\nexport default Header;","export const PLAYERS = \r\n[\r\n  {\r\n    name: \"Andrei\",\r\n    score: 0,\r\n    id: 0\r\n  },\r\n  {\r\n    name: \"Mihai\",\r\n    score: 0,\r\n    id: 1\r\n  },\r\n  {\r\n    name: \"Laura\",\r\n    score: 0,\r\n    id: 2\r\n  },\r\n  {\r\n    name: \"Octav\",\r\n    score: 0,\r\n    id: 3\r\n  }\r\n];","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = ({changeScore, id, score}) => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\" onClick={() => changeScore(id, -1)}> - </button>\r\n      <span className=\"counter-score\">{ score }</span>\r\n      <button className=\"counter-action increment\" onClick={() => changeScore(id, 1)}> + </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCounter.propTypes= {\r\n  changeScore: PropTypes.func,\r\n  id: PropTypes.number,\r\n  score: PropTypes.number\r\n}\r\n\r\nexport default Counter;","import React from \"react\";\r\n\r\nconst Icon = (props) => {\r\n\r\n  return(\r\n  <svg viewBox=\"0 0 44 35\" className={ props.isHighScore ? 'is-high-score' : null }>\r\n    <path\r\n      d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\"\r\n      transform=\"translate(0 0.301727)\"\r\n    />\r\n    <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\" />\r\n  </svg>\r\n  )\r\n};\r\n\r\nexport default Icon;","import React from 'react';\r\nimport Counter from \"./Counter\";\r\nimport Icon from './Icon';  \r\n\r\nclass Player extends React.PureComponent {\r\n\r\n  render() { \r\n\r\n    const {removePlayer, isHighScore, name, score, changeScore, id} = this.props;\r\n    \r\n    console.log(name + \" rendered\");\r\n    return (\r\n      <div className=\"player\">\r\n        <span className=\"player-name\">\r\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>\r\n            âœ–\r\n          </button>\r\n\r\n          <Icon isHighScore={isHighScore} /> \r\n         \r\n          {name}\r\n        </span>\r\n\r\n        <Counter \r\n          score= {score}\r\n          changeScore = {changeScore} \r\n          id = {id}\r\n          />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n \r\nexport default Player;","import React, { Component } from \"react\";\r\n\r\nclass AddPlayer extends Component {\r\n  state = { value: \"\" };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ value: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if(this.state.value){\r\n      this.props.addPlayer(this.state.value);\r\n      this.setState({value: \"\"});\r\n    }    \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Add a new player\" \r\n          value={this.state.value} onChange={this.handleChange} \r\n          />\r\n        <input type=\"submit\" value=\"Add Player\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPlayer;","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport { PLAYERS } from \"./utils/players\";\nimport Player from \"./components/Player\";\nimport AddPlayerForm from \"./components/AddPlayer\";\nimport './scoreboard.css';\n\nclass App extends Component {\n  state = {\n    players: PLAYERS\n  };\n\n  getHighScore = () => {\n    const scores = this.state.players.map(p => p.score);\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    }\n    return null;\n  };\n\n  handleChangeScore = (id, modifier) => {\n  \n    this.setState(prevState => ({\n      players: prevState.players.map(player => {\n        if (player.id !== id) {\n          return player;\n        }\n        else {\n          return Object.assign(player, { score: player.score + modifier });\n        }\n      })\n    }));\n  };\n\n  handleRemovePlayer = id => {\n    this.setState(prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  };\n\n  handleAddPlayer = name => {\n\n    const genUniqIncrId = () => 1 + Math.max(...this.state.players.map(player => player.id));\n\n    this.setState(prevState => ({\n      players: [...prevState.players, { name, id: genUniqIncrId(), score: 0 }]\n    }));\n  };\n\n  render() {\n    const highScore = this.getHighScore();\n    return (\n      <div className=\"scoreboard\" >\n        <Header title=\"Scoreboard\" players={this.state.players} />\n\n        {this.state.players.map(player => (\n          <Player\n            name={player.name}\n            id={player.id}\n            key={player.id.toString()}\n            removePlayer={this.handleRemovePlayer}\n            changeScore={this.handleChangeScore}\n            score={player.score}\n            isHighScore={highScore === player.score}\n          />\n        ))}\n\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}