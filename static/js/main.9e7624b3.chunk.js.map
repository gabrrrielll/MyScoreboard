{"version":3,"sources":["components/Header.js","components/Counter.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","titlu","className","totalPlayers","Counter","onClick","handleScorChange","scor","key","Player","nume","components_Counter","App","state","players","id","direction","_this2","this","jucatori","map","element","components_Player","toString","components_Header","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAWeA,SATA,SAACC,GAEZ,OACIC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,OACXH,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAAhB,YAAkCL,EAAMM,iBCUnCC,EAbC,SAACP,GAGb,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACfJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,2BAA2BG,QAAUR,EAAMS,kBAA7D,KACAR,EAAAC,EAAAC,cAAA,QAAME,UAAU,iBAAiBL,EAAMU,MACvCT,EAAAC,EAAAC,cAAA,UAAQE,UAAU,2BAA2BG,QAAUR,EAAMS,iBAAiBT,EAAMW,IAAK,IAAzF,OCGOC,EAVA,SAACZ,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,eACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,iBAAlB,UAA6CL,EAAMa,MAExDZ,EAAAC,EAAAC,cAACW,EAAD,CAASL,iBAAoBT,EAAMS,iBAAkBC,KAAMV,EAAMU,KAAOC,IAAMX,EAAMW,QC8B7EI,6MAlCbC,MAAQ,CACNC,QAAS,CACP,CAACJ,KAAM,QAASK,GAAI,EAAGR,KAAM,GAC7B,CAACG,KAAM,OAAQK,GAAI,EAAGR,KAAM,GAC5B,CAACG,KAAM,SAAUK,GAAI,EAAGR,KAAM,OAIlCD,iBAAmB,SAACS,EAAIC,6EAMf,IAAAC,EAAAC,KAEDC,EAAWD,KAAKL,MAAMC,QAAQM,IAAI,SAAAC,GACtC,OACEvB,EAAAC,EAAAC,cAACsB,EAAD,CAAQd,IAAMa,EAAQN,GAAGQ,WAAYb,KAAMW,EAAQX,KAAMJ,iBAAkBW,EAAKX,iBAAkBC,KAAMc,EAAQd,SAIpH,OAEET,EAAAC,EAAAC,cAAA,OAAKE,UAAY,cAClBJ,EAAAC,EAAAC,cAACwB,EAAD,CAAQvB,MAAQ,aAAaE,aAAce,KAAKL,MAAMC,QAAQW,SAE7DN,UA5BYO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9e7624b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props)=>{\r\n   \r\n    return(\r\n        <header>\r\n          <h1>{props.titlu}</h1>\r\n          <span className=\"stats\">Players: {props.totalPlayers}</span>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\n\r\n\r\nconst Counter = (props) => {\r\n    \r\n        \r\n    return(\r\n        <div className=\"counter\">\r\n        <button className=\"counter-action decrement\" onClick={ props.handleScorChange }>-</button>\r\n        <span className=\"counter-score\">{props.scor}</span>\r\n        <button className=\"counter-action increment\" onClick={ props.handleScorChange(props.key, 1)}>+</button>\r\n        </div>\r\n    )\r\n\r\n    }\r\n\r\nexport default Counter;","import React from 'react';\r\nimport Counter from './Counter';\r\n\r\n\r\nconst Player = (props)=>{\r\n    return(\r\n        <div className=\"player\">\r\n          <span className=\"player-name\"\r\n            ><button className=\"remove-player\">âœ–</button>{props.nume}</span>          \r\n        \r\n        <Counter handleScorChange = {props.handleScorChange} scor={props.scor}  key= {props.key} />\r\n        </div>\r\n    )\r\n}\r\nexport default Player;","import React, { Component } from 'react';\nimport './scoreboard.css';\nimport Header from './components/Header';\nimport Player from './components/Player';\n\nclass App extends Component {\n  state = {\n    players: [\n      {nume: \"Mario\", id: 0, scor: 0 },\n      {nume: \"Alex\", id: 1, scor: 0},\n      {nume: \"Andrei\", id: 2, scor: 0},\n    ]\n    \n  }\n  handleScorChange = (id, direction) => {\n    //direction = this.state.scor +1\n   const scor=\"11\";\n\n  }\n\n  render() {\n    \n    const jucatori = this.state.players.map(element => {\n      return(\n        <Player key= {element.id.toString()} nume={element.nume} handleScorChange={this.handleScorChange} scor={element.scor}/>\n        \n\n    )})\n    return (\n     \n      <div className = \"scoreboard\">\n     <Header titlu = \"Titlul meu\" totalPlayers={this.state.players.length} />\n     \n     {jucatori}\n      \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}